package com.p2p.loan.backend.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class Loan extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_BILLS = "bills";

    public static final String FUNC_CONFIRM = "confirm";

    public static final String FUNC_CONTRIBUTE = "contribute";

    public static final String FUNC_CONTRIBUTEPROJECTS = "contributeProjects";

    public static final String FUNC_CONTRIBUTION = "contribution";

    public static final String FUNC_CREATEPROJECT = "createProject";

    public static final String FUNC_CREDITSCORE = "creditScore";

    public static final String FUNC_GETALLPROJECTS = "getAllProjects";

    public static final String FUNC_GETAMOUNTNEEDREPAYNOW = "getAmountNeedRepayNow";

    public static final String FUNC_GETBILL = "getBill";

    public static final String FUNC_GETBILLSBYPID = "getBillsByPid";

    public static final String FUNC_GETCONTRIBUTEPROJECTS = "getContributeProjects";

    public static final String FUNC_GETCONTRIBUTIONSBYPID = "getContributionsByPid";

    public static final String FUNC_GETLAUNCHPROJECTS = "getLaunchProjects";

    public static final String FUNC_LAUNCHPROJECTS = "launchProjects";

    public static final String FUNC_LAUNCHERS = "launchers";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PROJECTS = "projects";

    public static final String FUNC_REGISTERLAUNCHER = "registerLauncher";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REPAY = "repay";

    public static final String FUNC_REVOCATEPROJECT = "revocateProject";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event CONFIRM_EVENT = new Event("Confirm",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event CONTRIBUTE_EVENT = new Event("Contribute",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CREATEPROJECT_EVENT = new Event("CreateProject",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REGISTERLAUNCHER_EVENT = new Event("RegisterLauncher",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REPAY_EVENT = new Event("Repay",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REVOCATEPROJECT_EVENT = new Event("RevocateProject",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Loan(String contractAddress, Web3j web3j, Credentials credentials,
                   BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Loan(String contractAddress, Web3j web3j, Credentials credentials,
                   ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Loan(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                   BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Loan(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                   ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ConfirmEventResponse> getConfirmEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CONFIRM_EVENT, transactionReceipt);
        ArrayList<ConfirmEventResponse> responses = new ArrayList<ConfirmEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConfirmEventResponse typedResponse = new ConfirmEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ConfirmEventResponse getConfirmEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CONFIRM_EVENT, log);
        ConfirmEventResponse typedResponse = new ConfirmEventResponse();
        typedResponse.log = log;
        typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ConfirmEventResponse> confirmEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getConfirmEventFromLog(log));
    }

    public Flowable<ConfirmEventResponse> confirmEventFlowable(DefaultBlockParameter startBlock,
                                                               DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONFIRM_EVENT));
        return confirmEventFlowable(filter);
    }

    public static List<ContributeEventResponse> getContributeEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CONTRIBUTE_EVENT, transactionReceipt);
        ArrayList<ContributeEventResponse> responses = new ArrayList<ContributeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ContributeEventResponse typedResponse = new ContributeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.investor = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ContributeEventResponse getContributeEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CONTRIBUTE_EVENT, log);
        ContributeEventResponse typedResponse = new ContributeEventResponse();
        typedResponse.log = log;
        typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.investor = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ContributeEventResponse> contributeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getContributeEventFromLog(log));
    }

    public Flowable<ContributeEventResponse> contributeEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONTRIBUTE_EVENT));
        return contributeEventFlowable(filter);
    }

    public static List<CreateProjectEventResponse> getCreateProjectEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CREATEPROJECT_EVENT, transactionReceipt);
        ArrayList<CreateProjectEventResponse> responses = new ArrayList<CreateProjectEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateProjectEventResponse typedResponse = new CreateProjectEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CreateProjectEventResponse getCreateProjectEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CREATEPROJECT_EVENT, log);
        CreateProjectEventResponse typedResponse = new CreateProjectEventResponse();
        typedResponse.log = log;
        typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<CreateProjectEventResponse> createProjectEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCreateProjectEventFromLog(log));
    }

    public Flowable<CreateProjectEventResponse> createProjectEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATEPROJECT_EVENT));
        return createProjectEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<RegisterLauncherEventResponse> getRegisterLauncherEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REGISTERLAUNCHER_EVENT, transactionReceipt);
        ArrayList<RegisterLauncherEventResponse> responses = new ArrayList<RegisterLauncherEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterLauncherEventResponse typedResponse = new RegisterLauncherEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RegisterLauncherEventResponse getRegisterLauncherEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REGISTERLAUNCHER_EVENT, log);
        RegisterLauncherEventResponse typedResponse = new RegisterLauncherEventResponse();
        typedResponse.log = log;
        typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RegisterLauncherEventResponse> registerLauncherEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRegisterLauncherEventFromLog(log));
    }

    public Flowable<RegisterLauncherEventResponse> registerLauncherEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTERLAUNCHER_EVENT));
        return registerLauncherEventFlowable(filter);
    }

    public static List<RepayEventResponse> getRepayEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REPAY_EVENT, transactionReceipt);
        ArrayList<RepayEventResponse> responses = new ArrayList<RepayEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RepayEventResponse typedResponse = new RepayEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.totalRepay = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RepayEventResponse getRepayEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REPAY_EVENT, log);
        RepayEventResponse typedResponse = new RepayEventResponse();
        typedResponse.log = log;
        typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.addr = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.totalRepay = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<RepayEventResponse> repayEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRepayEventFromLog(log));
    }

    public Flowable<RepayEventResponse> repayEventFlowable(DefaultBlockParameter startBlock,
                                                           DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REPAY_EVENT));
        return repayEventFlowable(filter);
    }

    public static List<RevocateProjectEventResponse> getRevocateProjectEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REVOCATEPROJECT_EVENT, transactionReceipt);
        ArrayList<RevocateProjectEventResponse> responses = new ArrayList<RevocateProjectEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RevocateProjectEventResponse typedResponse = new RevocateProjectEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RevocateProjectEventResponse getRevocateProjectEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REVOCATEPROJECT_EVENT, log);
        RevocateProjectEventResponse typedResponse = new RevocateProjectEventResponse();
        typedResponse.log = log;
        typedResponse.pid = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RevocateProjectEventResponse> revocateProjectEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRevocateProjectEventFromLog(log));
    }

    public Flowable<RevocateProjectEventResponse> revocateProjectEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REVOCATEPROJECT_EVENT));
        return revocateProjectEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> bills(
            BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_BILLS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0),
                        new org.web3j.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> confirm(BigInteger pid) {
        final Function function = new Function(
                FUNC_CONFIRM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> contribute(BigInteger pid, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_CONTRIBUTE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<BigInteger> contributeProjects(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_CONTRIBUTEPROJECTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0),
                        new org.web3j.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>> contribution(
            BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_CONTRIBUTION,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0),
                        new org.web3j.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createProject(BigInteger _amount,
                                                                BigInteger _rate, BigInteger _term, BigInteger _collectEndTime,
                                                                BigInteger _repayMethod) {
        final Function function = new Function(
                FUNC_CREATEPROJECT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount),
                        new org.web3j.abi.datatypes.generated.Uint256(_rate),
                        new org.web3j.abi.datatypes.generated.Uint256(_term),
                        new org.web3j.abi.datatypes.generated.Uint256(_collectEndTime),
                        new org.web3j.abi.datatypes.generated.Uint8(_repayMethod)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> creditScore(String param0) {
        final Function function = new Function(FUNC_CREDITSCORE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getAllProjects() {
        final Function function = new Function(FUNC_GETALLPROJECTS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Project>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getAmountNeedRepayNow(BigInteger pid,
                                                                BigInteger current) {
        final Function function = new Function(FUNC_GETAMOUNTNEEDREPAYNOW,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pid),
                        new org.web3j.abi.datatypes.generated.Uint256(current)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getBill(BigInteger pid) {
        final Function function = new Function(FUNC_GETBILL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bill>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getBillsByPid(BigInteger pid) {
        final Function function = new Function(FUNC_GETBILLSBYPID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bill>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getContributeProjects(String addr) {
        final Function function = new Function(FUNC_GETCONTRIBUTEPROJECTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Project>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getContributionsByPid(BigInteger pid) {
        final Function function = new Function(FUNC_GETCONTRIBUTIONSBYPID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pid)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Contribution>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getLaunchProjects(String addr) {
        final Function function = new Function(FUNC_GETLAUNCHPROJECTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Project>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> launchProjects(String param0, BigInteger param1) {
        final Function function = new Function(FUNC_LAUNCHPROJECTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0),
                        new org.web3j.abi.datatypes.generated.Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> launchers(String param0) {
        final Function function = new Function(FUNC_LAUNCHERS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>> projects(
            BigInteger param0) {
        final Function function = new Function(FUNC_PROJECTS,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (String) results.get(8).getValue(),
                                (BigInteger) results.get(9).getValue(),
                                (BigInteger) results.get(10).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> registerLauncher(String addr) {
        final Function function = new Function(
                FUNC_REGISTERLAUNCHER,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> repay(BigInteger pid, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_REPAY,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> revocateProject(BigInteger pid) {
        final Function function = new Function(
                FUNC_REVOCATEPROJECT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Loan load(String contractAddress, Web3j web3j, Credentials credentials,
                            BigInteger gasPrice, BigInteger gasLimit) {
        return new Loan(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Loan load(String contractAddress, Web3j web3j,
                            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Loan(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Loan load(String contractAddress, Web3j web3j, Credentials credentials,
                            ContractGasProvider contractGasProvider) {
        return new Loan(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Loan load(String contractAddress, Web3j web3j,
                            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Loan(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Loan> deploy(Web3j web3j, Credentials credentials,
                                          ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Loan.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<Loan> deploy(Web3j web3j, TransactionManager transactionManager,
                                          ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Loan.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Loan> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
                                          BigInteger gasLimit) {
        return deployRemoteCall(Loan.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Loan> deploy(Web3j web3j, TransactionManager transactionManager,
                                          BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Loan.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Project extends StaticStruct {
        public BigInteger pid;

        public BigInteger amount;

        public BigInteger rate;

        public BigInteger term;

        public BigInteger createTime;

        public BigInteger collectEndTime;

        public BigInteger repayMethod;

        public BigInteger status;

        public String launcher;

        public BigInteger collected;

        public BigInteger currentBill;

        public Project(BigInteger pid, BigInteger amount, BigInteger rate, BigInteger term,
                       BigInteger createTime, BigInteger collectEndTime, BigInteger repayMethod,
                       BigInteger status, String launcher, BigInteger collected, BigInteger currentBill) {
            super(new org.web3j.abi.datatypes.generated.Uint256(pid),
                    new org.web3j.abi.datatypes.generated.Uint256(amount),
                    new org.web3j.abi.datatypes.generated.Uint256(rate),
                    new org.web3j.abi.datatypes.generated.Uint256(term),
                    new org.web3j.abi.datatypes.generated.Uint256(createTime),
                    new org.web3j.abi.datatypes.generated.Uint256(collectEndTime),
                    new org.web3j.abi.datatypes.generated.Uint8(repayMethod),
                    new org.web3j.abi.datatypes.generated.Uint8(status),
                    new org.web3j.abi.datatypes.Address(160, launcher),
                    new org.web3j.abi.datatypes.generated.Uint256(collected),
                    new org.web3j.abi.datatypes.generated.Uint256(currentBill));
            this.pid = pid;
            this.amount = amount;
            this.rate = rate;
            this.term = term;
            this.createTime = createTime;
            this.collectEndTime = collectEndTime;
            this.repayMethod = repayMethod;
            this.status = status;
            this.launcher = launcher;
            this.collected = collected;
            this.currentBill = currentBill;
        }

        public Project(Uint256 pid, Uint256 amount, Uint256 rate, Uint256 term, Uint256 createTime,
                       Uint256 collectEndTime, Uint8 repayMethod, Uint8 status, Address launcher,
                       Uint256 collected, Uint256 currentBill) {
            super(pid, amount, rate, term, createTime, collectEndTime, repayMethod, status, launcher, collected, currentBill);
            this.pid = pid.getValue();
            this.amount = amount.getValue();
            this.rate = rate.getValue();
            this.term = term.getValue();
            this.createTime = createTime.getValue();
            this.collectEndTime = collectEndTime.getValue();
            this.repayMethod = repayMethod.getValue();
            this.status = status.getValue();
            this.launcher = launcher.getValue();
            this.collected = collected.getValue();
            this.currentBill = currentBill.getValue();
        }
    }

    public static class Bill extends StaticStruct {
        public BigInteger projectId;

        public BigInteger repayTime;

        public BigInteger capital;

        public BigInteger interest;

        public BigInteger repaid;

        public BigInteger status;

        public Bill(BigInteger projectId, BigInteger repayTime, BigInteger capital,
                    BigInteger interest, BigInteger repaid, BigInteger status) {
            super(new org.web3j.abi.datatypes.generated.Uint256(projectId),
                    new org.web3j.abi.datatypes.generated.Uint256(repayTime),
                    new org.web3j.abi.datatypes.generated.Uint256(capital),
                    new org.web3j.abi.datatypes.generated.Uint256(interest),
                    new org.web3j.abi.datatypes.generated.Uint256(repaid),
                    new org.web3j.abi.datatypes.generated.Uint256(status));
            this.projectId = projectId;
            this.repayTime = repayTime;
            this.capital = capital;
            this.interest = interest;
            this.repaid = repaid;
            this.status = status;
        }

        public Bill(Uint256 projectId, Uint256 repayTime, Uint256 capital, Uint256 interest,
                    Uint256 repaid, Uint256 status) {
            super(projectId, repayTime, capital, interest, repaid, status);
            this.projectId = projectId.getValue();
            this.repayTime = repayTime.getValue();
            this.capital = capital.getValue();
            this.interest = interest.getValue();
            this.repaid = repaid.getValue();
            this.status = status.getValue();
        }
    }

    public static class Contribution extends StaticStruct {
        public String investor;

        public BigInteger amount;

        public BigInteger time;

        public BigInteger repaid;

        public Contribution(String investor, BigInteger amount, BigInteger time,
                            BigInteger repaid) {
            super(new org.web3j.abi.datatypes.Address(160, investor),
                    new org.web3j.abi.datatypes.generated.Uint256(amount),
                    new org.web3j.abi.datatypes.generated.Uint256(time),
                    new org.web3j.abi.datatypes.generated.Uint256(repaid));
            this.investor = investor;
            this.amount = amount;
            this.time = time;
            this.repaid = repaid;
        }

        public Contribution(Address investor, Uint256 amount, Uint256 time, Uint256 repaid) {
            super(investor, amount, time, repaid);
            this.investor = investor.getValue();
            this.amount = amount.getValue();
            this.time = time.getValue();
            this.repaid = repaid.getValue();
        }
    }

    public static class ConfirmEventResponse extends BaseEventResponse {
        public BigInteger pid;
    }

    public static class ContributeEventResponse extends BaseEventResponse {
        public BigInteger pid;

        public String investor;

        public BigInteger value;
    }

    public static class CreateProjectEventResponse extends BaseEventResponse {
        public BigInteger pid;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RegisterLauncherEventResponse extends BaseEventResponse {
        public String addr;
    }

    public static class RepayEventResponse extends BaseEventResponse {
        public BigInteger pid;

        public String addr;

        public BigInteger totalRepay;

        public BigInteger status;
    }

    public static class RevocateProjectEventResponse extends BaseEventResponse {
        public BigInteger pid;
    }
}
